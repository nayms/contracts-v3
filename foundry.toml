## defaults for _all_ profiles
[profile.default]
src = 'src'
out = 'forge-artifacts'
libs = ['lib']
libraries = []
cache = true
force = false
evm_version = 'london'
auto_detect_solc = true
offline = true
optimizer = true
optimizer_runs = 200
via_ir = false
ignored_error_codes = []
ffi = false
initial_balance = '0xffffffffffffffffffffffff'
chain_id = 0
# NOTE due to a toml-rs limitation, gas_limit value needs to be a string if the desired gas limit exceeds `i64::MAX` (9223372036854775807)
gas_limit = 9223372036854775807
gas_price = 0
block_base_fee_per_gas = 0
block_coinbase = '0x0000000000000000000000000000000000000000'
block_timestamp = 0
block_difficulty = 0
# How to treat revert (and require) reason strings.
# Possible values are: "default", "strip", "debug" and "verboseDebug".
#  "default" does not inject compiler-generated revert strings and keeps user-supplied ones.
# "strip" removes all revert strings (if possible, i.e. if literals are used) keeping side-effects
# "debug" injects strings for compiler-generated internal reverts, implemented for ABI encoders V1 and V2 for now.
# "verboseDebug" even appends further information to user-supplied revert strings (not yet implemented)
revert_strings = "default"
# caches storage retrieved locally for certain chains and endpoints
# can also be restricted to `chains = ["optimism", "mainnet"]`
# by default all endpoints will be cached, alternative options are "remote" for only caching non localhost endpoints and "<regex>"
# to disable storage caching entirely set `no_storage_caching = true`
rpc_storage_caching = { chains = "all", endpoints = "all" }
# this overrides `rpc_storage_caching` entirely
no_storage_caching = false
# use ipfs method to generate the metadata hash, solc's default.
# To not include the metadata hash, to allow for deterministic code: https://docs.soliditylang.org/en/latest/metadata.html, use "none"
bytecode_hash = "ipfs"
# If this option is enabled, Solc is instructed to generate output (bytecode) only for the required contracts
# this can reduce compile time for `forge test` a bit but is considered experimental at this point.
sparse_mode = false
# Setting this option enables decoding of error traces from mainnet deployed / verfied contracts via etherscan
# permissions for read-write
fs_permissions = [
    { access = "read-write", path = "./src/diamonds/nayms/interfaces/" },
    { access = "read-write", path = "./facetsdeployed.txt" },
    { access = "read-write", path = "./deployedAddresses.json" },
    { access = "read-write", path = "./deployedAddressesTest.json" },
    { access = "read", path = "./forge-artifacts/" },
    { access = "read", path = "./broadcast/" },
    { access = "read", path = "./nayms_mnemonic.txt" },
]

[profile.test]
solc = '0.8.17'
auto_detect_solc = false
optimizer = false
ffi = true
sparse_mode = true
verbosity = 4
ignored_error_codes = ["license", "code-size"]
no_match_contract = "ReplaceDiamondCutTest"

[fuzz]
runs = 256
max_test_rejects = 65536
seed = '0x3e8'
dictionary_weight = 40
include_storage = true
include_push_bytes = true

[rpc_endpoints]
mainnet = "${ETH_MAINNET_RPC_URL}"
goerli = "${ETH_GOERLI_RPC_URL}"
sepolia = "${ETH_SEPOLIA_RPC_URL}"
anvil = "${LOCAL_RPC_URL}"
# See more config options https://github.com/foundry-rs/foundry/tree/master/config
