
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.13 <0.9;

/// ------------------------------------------------------------------------------------------------------------
///
/// NOTE: this file is auto-generated by prep-build.js, please DO NOT modify it directly.
///
/// ------------------------------------------------------------------------------------------------------------

import "src/diamonds/nayms/INayms.sol";
import { Nayms } from "src/diamonds/nayms/Nayms.sol";
import { InitDiamond } from "src/diamonds/nayms/InitDiamond.sol";

import { AdminFacet } from "src/diamonds/nayms/facets/AdminFacet.sol";
import { EntityFacet } from "src/diamonds/nayms/facets/EntityFacet.sol";
import { MarketFacet } from "src/diamonds/nayms/facets/MarketFacet.sol";
import { NaymsTokenFacet } from "src/diamonds/nayms/facets/NaymsTokenFacet.sol";
import { SimplePolicyFacet } from "src/diamonds/nayms/facets/SimplePolicyFacet.sol";
import { SystemFacet } from "src/diamonds/nayms/facets/SystemFacet.sol";
import { TokenizedVaultFacet } from "src/diamonds/nayms/facets/TokenizedVaultFacet.sol";
import { TokenizedVaultIOFacet } from "src/diamonds/nayms/facets/TokenizedVaultIOFacet.sol";
import { UserFacet } from "src/diamonds/nayms/facets/UserFacet.sol";

enum NaymsFacetAddressIndex {
  Admin,
  Entity,
  Market,
  NaymsToken,
  SimplePolicy,
  System,
  TokenizedVault,
  TokenizedVaultIO,
  User
}

library LibGeneratedNaymsFacetHelpers {
  function getFacetNames() internal pure returns (string[] memory facetNames) {
    facetNames = new string[](9);
    facetNames[0] = "Admin";
    facetNames[1] = "Entity";
    facetNames[2] = "Market";
    facetNames[3] = "NaymsToken";
    facetNames[4] = "SimplePolicy";
    facetNames[5] = "System";
    facetNames[6] = "TokenizedVault";
    facetNames[7] = "TokenizedVaultIO";
    facetNames[8] = "User";
  }

  function createNaymsDiamondFunctionsCut(address[] memory facetAddresses) internal pure returns (IDiamondCut.FacetCut[] memory cut) {
    // initialize the diamond as well as cut in all facets
    cut = new IDiamondCut.FacetCut[](9);

    // yul too slow, so fix stack too deep here
    {
      bytes4[] memory f0 = new bytes4[](15);
      f0[0] = IAdminFacet.setMaxDividendDenominations.selector;
      f0[1] = IAdminFacet.getMaxDividendDenominations.selector;
      f0[2] = IAdminFacet.isSupportedExternalToken.selector;
      f0[3] = IAdminFacet.addSupportedExternalToken.selector;
      f0[4] = IAdminFacet.getSupportedExternalTokens.selector;
      f0[5] = IAdminFacet.getSystemId.selector;
      f0[6] = IAdminFacet.isObjectTokenizable.selector;
      f0[7] = IAdminFacet.lockFunction.selector;
      f0[8] = IAdminFacet.unlockFunction.selector;
      f0[9] = IAdminFacet.isFunctionLocked.selector;
      f0[10] = IAdminFacet.lockAllFundTransferFunctions.selector;
      f0[11] = IAdminFacet.unlockAllFundTransferFunctions.selector;
      f0[12] = IAdminFacet.replaceMakerBP.selector;
      f0[13] = IAdminFacet.addFeeSchedule.selector;
      f0[14] = IAdminFacet.removeFeeSchedule.selector;
      cut[0] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.Admin)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f0
      });
      bytes4[] memory f1 = new bytes4[](10);
      f1[0] = IEntityFacet.domainSeparatorV4.selector;
      f1[1] = IEntityFacet.hashTypedDataV4.selector;
      f1[2] = IEntityFacet.createSimplePolicy.selector;
      f1[3] = IEntityFacet.enableEntityTokenization.selector;
      f1[4] = IEntityFacet.updateEntityTokenInfo.selector;
      f1[5] = IEntityFacet.startTokenSale.selector;
      f1[6] = IEntityFacet.isTokenWrapped.selector;
      f1[7] = IEntityFacet.updateEntity.selector;
      f1[8] = IEntityFacet.getEntityInfo.selector;
      f1[9] = IEntityFacet.getFeeSchedule.selector;
      cut[1] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.Entity)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f1
      });
      bytes4[] memory f2 = new bytes4[](8);
      f2[0] = IMarketFacet.executeLimitOffer.selector;
      f2[1] = IMarketFacet.cancelOffer.selector;
      f2[2] = IMarketFacet.getBestOfferId.selector;
      f2[3] = IMarketFacet.getLastOfferId.selector;
      f2[4] = IMarketFacet.getOffer.selector;
      f2[5] = IMarketFacet.isActiveOffer.selector;
      f2[6] = IMarketFacet.calculateTradingFees.selector;
      f2[7] = IMarketFacet.getMakerBP.selector;
      cut[2] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.Market)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f2
      });
      bytes4[] memory f3 = new bytes4[](2);
      f3[0] = INaymsTokenFacet.totalSupply.selector;
      f3[1] = INaymsTokenFacet.balanceOf.selector;
      cut[3] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.NaymsToken)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f3
      });
      bytes4[] memory f4 = new bytes4[](7);
      f4[0] = ISimplePolicyFacet.getSigningHash.selector;
      f4[1] = ISimplePolicyFacet.paySimplePremium.selector;
      f4[2] = ISimplePolicyFacet.paySimpleClaim.selector;
      f4[3] = ISimplePolicyFacet.getSimplePolicyInfo.selector;
      f4[4] = ISimplePolicyFacet.checkAndUpdateSimplePolicyState.selector;
      f4[5] = ISimplePolicyFacet.cancelSimplePolicy.selector;
      f4[6] = ISimplePolicyFacet.calculatePremiumFees.selector;
      cut[4] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.SimplePolicy)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f4
      });
      bytes4[] memory f5 = new bytes4[](5);
      f5[0] = ISystemFacet.createEntity.selector;
      f5[1] = ISystemFacet.stringToBytes32.selector;
      f5[2] = ISystemFacet.isObject.selector;
      f5[3] = ISystemFacet.getObjectMeta.selector;
      f5[4] = ISystemFacet.wrapToken.selector;
      cut[5] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.System)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f5
      });
      bytes4[] memory f6 = new bytes4[](11);
      f6[0] = ITokenizedVaultFacet.internalBalanceOf.selector;
      f6[1] = ITokenizedVaultFacet.internalTokenSupply.selector;
      f6[2] = ITokenizedVaultFacet.internalTransferFromEntity.selector;
      f6[3] = ITokenizedVaultFacet.wrapperInternalTransferFrom.selector;
      f6[4] = ITokenizedVaultFacet.internalBurn.selector;
      f6[5] = ITokenizedVaultFacet.getWithdrawableDividend.selector;
      f6[6] = ITokenizedVaultFacet.withdrawDividend.selector;
      f6[7] = ITokenizedVaultFacet.withdrawAllDividends.selector;
      f6[8] = ITokenizedVaultFacet.payDividendFromEntity.selector;
      f6[9] = ITokenizedVaultFacet.getLockedBalance.selector;
      f6[10] = ITokenizedVaultFacet.internalTransferByEntityAdmin.selector;
      cut[6] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.TokenizedVault)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f6
      });
      bytes4[] memory f7 = new bytes4[](2);
      f7[0] = ITokenizedVaultIOFacet.externalDeposit.selector;
      f7[1] = ITokenizedVaultIOFacet.externalWithdrawFromEntity.selector;
      cut[7] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.TokenizedVaultIO)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f7
      });
      bytes4[] memory f8 = new bytes4[](4);
      f8[0] = IUserFacet.getUserIdFromAddress.selector;
      f8[1] = IUserFacet.getAddressFromExternalTokenId.selector;
      f8[2] = IUserFacet.setEntity.selector;
      f8[3] = IUserFacet.getEntity.selector;
      cut[8] = IDiamondCut.FacetCut({
          facetAddress: address(facetAddresses[uint256(NaymsFacetAddressIndex.User)]),
          action: IDiamondCut.FacetCutAction.Add,
          functionSelectors: f8
      });
    }
  }

  function deployNaymsFacets() internal returns (address[] memory facetAddresses) {
    facetAddresses = new address[](9);
    facetAddresses[uint256(NaymsFacetAddressIndex.Admin)] = address(new AdminFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.Entity)] = address(new EntityFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.Market)] = address(new MarketFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.NaymsToken)] = address(new NaymsTokenFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.SimplePolicy)] = address(new SimplePolicyFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.System)] = address(new SystemFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.TokenizedVault)] = address(new TokenizedVaultFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.TokenizedVaultIO)] = address(new TokenizedVaultIOFacet());
    facetAddresses[uint256(NaymsFacetAddressIndex.User)] = address(new UserFacet());
  }

  function deployNaymsFacets(NaymsFacetAddressIndex index) internal returns (address facetAddress) {
    if (index == NaymsFacetAddressIndex.Admin) { return address(new AdminFacet()); }
    if (index == NaymsFacetAddressIndex.Entity) { return address(new EntityFacet()); }
    if (index == NaymsFacetAddressIndex.Market) { return address(new MarketFacet()); }
    if (index == NaymsFacetAddressIndex.NaymsToken) { return address(new NaymsTokenFacet()); }
    if (index == NaymsFacetAddressIndex.SimplePolicy) { return address(new SimplePolicyFacet()); }
    if (index == NaymsFacetAddressIndex.System) { return address(new SystemFacet()); }
    if (index == NaymsFacetAddressIndex.TokenizedVault) { return address(new TokenizedVaultFacet()); }
    if (index == NaymsFacetAddressIndex.TokenizedVaultIO) { return address(new TokenizedVaultIOFacet()); }
    if (index == NaymsFacetAddressIndex.User) { return address(new UserFacet()); }
  }

  function deployNaymsFacetsByName(string memory name) internal returns (address facetAddress) {
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("InitDiamond"))) { return address(new InitDiamond()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("Admin"))) { return address(new AdminFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("Entity"))) { return address(new EntityFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("Market"))) { return address(new MarketFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("NaymsToken"))) { return address(new NaymsTokenFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("SimplePolicy"))) { return address(new SimplePolicyFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("System"))) { return address(new SystemFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("TokenizedVault"))) { return address(new TokenizedVaultFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("TokenizedVaultIO"))) { return address(new TokenizedVaultIOFacet()); }
    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("User"))) { return address(new UserFacet()); }
  }
}
