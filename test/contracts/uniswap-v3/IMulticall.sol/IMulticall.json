{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "multicall(bytes[])": "ac9650d8"
  },
  "ast": {
    "absolutePath": "lib/v3-periphery/contracts/interfaces/IMulticall.sol",
    "id": 12390,
    "exportedSymbols": {
      "IMulticall": [
        12389
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:660:65",
    "nodes": [
      {
        "id": 12376,
        "nodeType": "PragmaDirective",
        "src": "45:24:65",
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".5"
        ]
      },
      {
        "id": 12377,
        "nodeType": "PragmaDirective",
        "src": "70:19:65",
        "literals": [
          "abicoder",
          "v2"
        ]
      },
      {
        "id": 12389,
        "nodeType": "ContractDefinition",
        "src": "200:504:65",
        "nodes": [
          {
            "id": 12388,
            "nodeType": "FunctionDefinition",
            "src": "610:92:65",
            "documentation": {
              "id": 12379,
              "nodeType": "StructuredDocumentation",
              "src": "227:378:65",
              "text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
            },
            "functionSelector": "ac9650d8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "multicall",
            "parameters": {
              "id": 12383,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12382,
                  "mutability": "mutable",
                  "name": "data",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "629:21:65",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12380,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "629:5:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 12381,
                    "nodeType": "ArrayTypeName",
                    "src": "629:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "628:23:65"
            },
            "returnParameters": {
              "id": 12387,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12386,
                  "mutability": "mutable",
                  "name": "results",
                  "nodeType": "VariableDeclaration",
                  "scope": 12388,
                  "src": "678:22:65",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 12384,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "678:5:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 12385,
                    "nodeType": "ArrayTypeName",
                    "src": "678:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "677:24:65"
            },
            "scope": 12389,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 12378,
          "nodeType": "StructuredDocumentation",
          "src": "91:109:65",
          "text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          12389
        ],
        "name": "IMulticall",
        "scope": 12390
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 65
}