#!/usr/bin/env node
const path = require('path')
const fs = require('fs')
const spawn = require('cross-spawn')
const chalk = require('chalk')

const PROJECT_DIR = path.join(__dirname, '..')
const FACETS_DEPLOYED_TXT = path.join(PROJECT_DIR, 'facetsdeployed.txt')
const GENERATED_METADATA_SOL = path.join(PROJECT_DIR, 'script', 'utils', 'LibGeneratedFacetMetadata.sol')

// generate facet names 
const ret = spawn.sync('find', 'src/diamonds/nayms/facets/ -name *Facet.sol -type f -execdir basename -s Facet.sol {} +'.split(' '), {
  stdio: 'pipe',
  cwd: PROJECT_DIR
})

const facetNamesRaw = ret.stdout.toString('utf-8')
console.log(chalk.blue('== Facets =='))
console.log(facetNamesRaw)
fs.writeFileSync(FACETS_DEPLOYED_TXT, facetNamesRaw, { encoding: 'utf-8'})

const facetNames = facetNamesRaw.trim().split("\n")

// write metadata solidity file
fs.writeFileSync(GENERATED_METADATA_SOL, `
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.13 <0.9;

/// NOTE: this file is auto-generated by ${__filename}, please DO NOT modify it directly.

library LibGeneratedFacetMetadata {
  function getFacetNames() public pure returns (string[] memory facetNames) {
    facetNames = new string[](${facetNames.length});
    ${facetNames.map((n, i) => `facetNames[${i}] = "${n}";`).join("\n    ")}
  }
}
`, { encoding: 'utf-8'})

